# RV-Predict User's Manual

## Package contents

The RV-Predict programs ordinarily are installed at
`$HOME/RV-Predict-C/bin/`.

`$HOME/RV-Predict-C/lib/` is where the product license key and other
files that support RV-Predict are installed.  Those files must be present
for RV-Predict/C to work, but the user does not ordinarily need to do
anything with them.

Documentation ordinarily resides at
`$HOME/RV-Predict-C/share/doc/rv-predict-c/`.  This manual is ordinarily
found under that directory, where it is called USERS-MANUAL.md.

Examples are optionally installed at
`$HOME/RV-Predict-C/share/examples/rv-predict-c/`.  There are a
variety of examples in C and C++.  Look at the README files under
`examples/rv-predict-c/` for more information.

The important programs for the everyday RV-Predict are `rvpc` and `rvpx`:

`rvpc`: a wrapper for `clang` that compiles and links programs with
    RV-Predict instrumentation.  When a program built with `rvpc` runs,
    it will ordinarily leave a trace file called `rvpredict.trace`
    in the current working directory.

`rvpc++`: like `rvpc`, only for `clang++`.

`rvpx`: a wrapper for programs that were built with RV-Predict
    instrumentation.  If you ordinarily run your program like
    `<command> <arguments>`, then run `rvpx <command> <arguments>` to
    see data-race reports. `rvpx` redirects the trace file for <command>
    from `./rvpredict.trace` to a temporary directory.  Then it analyzes
    the trace for data races.  After reporting any data races on the
    standard error output, `rvpx` deletes the temporary directory.

Advanced users may find a couple of other programs in the package useful.
Those programs are `rvpsymbolize` and `rvpdump`.  Note that those programs
may not appear in subsequent releases of RV-Predict:

`rvpsymbolize`: a filter that takes the name of an ELF executable file,
    `program` as an argument.  `rvpsymbolize` copies its standard
    input to its standard output with data and instruction addresses
    converted to symbols: using the DWARF debug information in `program`,
    `rvpsymbolize` replaces each hexadecimal instruction pointer enclosed
    in curly braces, {0x...}, with the corresponding function name,
    file, line number, and optional column number.  It also replaces
    each hexadecimal data address enclosed in square brackets, [0x...],
    with the corresponding symbol name.  For structures, `rvpsymbolize`
    makes a best effort to tell a data member name, and for arrays,
    `rvpsymbolize` makes a best effort to tell an array index.

`rvpdump`: a program that will read an RV-Predict compact trace
    file, `rvpredict.trace`, and print it to standard output in a
    human-readable format (default action) or, if the `-t legacy`
    option is provided, translate from the compact trace format to the
    legacy trace format.  Either provide the name of the trace file on
    the command line, `rvpdump rvpredict.trace`, or feed the trace into
    standard input, `rvpdump < rvpredict.trace`.

    Use the option `-t symbol-friendly` to produce human-readable output
    that is suitable for symbolization using `rvpsymbolize`.

    A user does not ordinarily need to run `rvpdump`.  The `-t legacy`
    option is deprecated; it may be removed from a future version of
    `rvpdump`.

## Using RV-Predict

### Getting started

Make sure that the RV-Predict/C `bin` directory is in your PATH.
Ordinarily, the directory to add to your PATH is `$HOME/RV-Predict-C/bin`.
In Bourne shell and workalikes such as `bash`, you can add it to PATH
like this:

	export PATH=${HOME}/RV-Predict-C/bin:${PATH}

In `csh` and `tcsh`, run this:

	setenv PATH ${HOME}/RV-Predict-C/bin:${PATH}

We recommend setting the proper PATH in your shell's login profile.

### Compiling and running programs with RV-Predict

The first step in using RV-Predict/C to detect data races is to
compile your C program with the RV-Predict instrumentation and runtime.
RV-Predict provides a script, `rvpc`, that runs your copy of `clang`,
adding options that run the instrumentation plug-in and link with the
RV-Predict runtime.  You can use `rvpc` as a drop-in replacement for
`clang`.

$ rvpc main.c

`rvpc++` is a drop-in replacement for `clang++`.

Add to rvpa, rvpx, and rvpsymbolize a --filter option that tells a keyword      
list of filters to disable: no-symbol, no-system, no-trim, no-signal.         
Implement no-symbol, no-trim, and no-signal.                               
                             
no-symbol disables symbolization altogether.

no-signal disables conversion from RV-Predict's signal-number 
representation, S1..Sn, to UNIX symbols like SIGHUP, SIGSEGV.        

no-trim leaves in symbols below main() on the stack, and it leaves
in symbols that belong to the RV-Predict runtime.
                                                          
no-system, which is not implemented yet, I intend to stop the   
symbolization from filtering symbols that are defined in system header          
files and libraries.  There is no such filtering, now.

