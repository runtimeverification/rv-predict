#!/usr/bin/env python
# -*- coding: utf-8 -*-
from collections import defaultdict
import shutil
import json
import uuid
import argparse
import os
import urllib

from jinja2 import Environment, FileSystemLoader
from pygments import highlight
from pygments.lexers import CLexer
from pygments.formatters import HtmlFormatter


class LinkedHtmlFormatter(HtmlFormatter):
    def __init__(self, **kwargs):
        HtmlFormatter.__init__(self, **kwargs)
        self.hl_links = kwargs['hl_links']
        self.fileid = kwargs['fileid']
        self.output_dir = os.path.relpath(args.output, os.path.dirname(args.output + '/' + self.fileid))

    def wrap(self, source, outfile):
        return self._wrap_code(source)

    def _wrap_code(self, source):
        yield 0, '<div class="' + self.fileid + ' pre">'
        lineno = 0

        for (i, txt) in source:
            if i != 1:
                yield i, txt
                continue
            lineno += 1
            if not (lineno in self.hl_lines):
                yield 0, '<span class="line-%d line">' % lineno
                yield i, txt[:-1]
                yield 0, '<sup class="after"></sup>\n'
                yield 0, '</span>'
                continue
            yield 0, '<div class="line-%d line line-with-errors">' % lineno
            if len(self.hl_links[lineno]) == 1:
                err = self.hl_links[lineno][0]
                ix = err[u'index']
                tgt = '%s/error-%d.html' % (self.output_dir, ix)
                yield 0, '<a class="hll" href="%s">' % tgt
                yield i, txt
                yield 0, '</a>'
            else:
                yield i, txt
            yield 0, '<div class="errors" style="display:none;">'
            for err in self.hl_links[lineno]:
                yield 0, '<span class="lineno">   </span>'
                msg = '%s (%s)' % (err[u'description'], err[u'error_id'])
                ix = err[u'index']
                tgt = '%s/error-%d.html' % (self.output_dir, ix)
                line = '<a href="%s"> %s Error #%d</a>\n' % (tgt, msg, ix)
                yield 0, line
            yield 0, '</div></div>'
        yield 0, '</div>'


def highlight_c(code, hl_links, fileid):
    hl_lines = hl_links.keys()
    return highlight(code,
                     CLexer(stripnl=False),
                     LinkedHtmlFormatter(hl_lines=hl_lines, hl_links=hl_links, linenos='inline', fileid=fileid))


def load_json(filename):
    with open(filename, 'r') as f:
        for line in f:
            if len(line) == 0:
                continue
            try:
                yield json.loads(line)
            except Exception:
                print 'error reading: ' + line

dirname = "%s/../share/rv-predict-c/html-report" % os.path.dirname(os.path.realpath(__file__))
parser = argparse.ArgumentParser()
parser.add_argument("input", nargs='+', help="json file generated with kcc -fissue-report")
parser.add_argument("-o", "--output", help="Directory to output html report to")
parser.add_argument("--encoding", help="Encoding used by source files in your project")
args = parser.parse_args()
if not args.output:
    if len(args.input) == 1:
        args.output = os.path.splitext(os.path.basename(args.input[0]))[0]
    else:
        args.output = "output"
errors = []
for i in args.input:
    errors.extend(load_json(i))
files = {}
datafiles = []
global_data = {item: load_json(item + '.json')
               for item in datafiles}


def listdict():
    return defaultdict(list)

def null_loc():
    return {
        u'rel_file': u'<unknown>',
        u'abs_file': u'<unknown>',
        u'missing': True,
        u'line': 0,
        u'column': 0,
        u'system_header': False,
    }

def null_frame():
    return {
        u'symbol': u'<unknown>',
        u'loc': null_loc(),
        u'locks': [],
    }

errorsByFile = defaultdict(listdict)
error_frequency_map = {}
for ix, err in enumerate(errors): # build error frequency map
    error_id = err[u'error_id']
    if error_id in error_frequency_map:
        error_frequency_map[error_id] += 1
    else:
        error_frequency_map[error_id] = 1

for ix, err in enumerate(errors):
    err[u'index'] = ix
    err[u'errdesc'] = '%s (%s)' % (err[u'description'], err[u'error_id'])
    err[u'frequency'] = error_frequency_map[err[u'error_id']]
    if (u'stack_traces' in err):
        traces = err[u'stack_traces']
        if traces:
            for trace in traces:
                frames = None
                for component in trace[u'components']:
                    frames = component[u'frames']
                    if frames:
                        primary_component = component
                        break
                if not frames:
                    frames.append(null_frame())
        else:
            err[u'stack_traces'] = [{u'frames': [null_frame()]}]
        frame = primary_component[u'frames'][0]
        for tr in traces:
            for cp in tr[u'components']:
                for fr in cp[u'frames']:
                    if (u'loc' in fr):
                        loc = fr[u'loc']
                        loc[u'missing'] = not os.path.exists(loc[u'abs_file'])
                        if loc[u'rel_file'] != "<unknown>":
                            files[loc[u'abs_file']] = loc[u'rel_file']
                        if not u'line' in loc:
                            loc[u'line'] = 0
                    else:
                        loc = null_loc()
                        fr[u'loc'] = loc
            if u'thread_created_at' in tr and not u'loc' in tr[u'thread_created_at']:
                tr[u'thread_created_at'][u'loc'] = null_loc()
    else:
        frame = err[u'loc']
        primary_component = {u'frames': [frame]}
        err[u'stack_traces']=[{u'components': [primary_component]}]
        if (u'loc' in frame):
            loc = frame[u'loc']
            if loc[u'rel_file'] != "<unknown>":
                files[loc[u'abs_file']] = loc[u'rel_file']
        else:
            frame[u'loc'] = null_loc()
    
    for trace in err[u'stack_traces']:
        for component in trace[u'components']:
            if len(component[u'frames']) > 0:
                frame = component[u'frames'][0]
                errorsByFile[loc[u'rel_file']][frame[u'loc'][u'line']].append(err)
    if (u'loc' in frame):
        loc = frame[u'loc']
        loc[u'missing'] = not os.path.exists(loc[u'abs_file'])
        err[u'missing'] = not os.path.exists(loc[u'abs_file'])
        err[u'file'] = loc[u'rel_file']
        err[u'abs_file'] = loc[u'abs_file']
        err[u'line'] = loc[u'line']
    else:
        err[u'missing'] = True
        err[u'file'] = u'<unknown>'
        frame[u'loc'] = null_loc()
    err[u'function'] = frame[u'symbol']
    err[u'primary_component'] = primary_component

def render_code(rel, abs, path, errors, to_js):
    filename = abs
    directory = os.path.dirname(path)
    extension = ".html"
    if to_js:
        extension = ".js"

    if not os.path.exists(args.output + '/' + directory):
        os.makedirs(args.output + '/' + directory)
    if not os.path.exists(filename):
        return
    with open(filename, 'r') as f, open(args.output + '/' + path + extension, 'w') as target:
        code = f.read()
        if args.encoding:
          try:
              code = code.decode(args.encoding)
          except UnicodeDecodeError:
              print "Error in " + abs
              raise
        if errors:
            errorlines = errorsByFile[rel]
        else:
            errorlines = {}
        
        if to_js:
            js = """
if (typeof(window['CODES']) === 'undefined') {
    window['CODES'] = {}
}
window['CODES']['%s'] = '%s'
""" % (path, highlight_c(code, errorlines, path).replace('\\', '\\\\').replace('\n', '\\n\' + \n\'')) 
            target.write(js.encode('utf-8'))
        else:
            template = env.get_template('sourcefile.html')
            target.write(template.render(filename=filename,
                                        errorlines=errorlines,
                                        code=code,
                                        info=rel,
                                        output_dir=os.path.relpath(args.output, os.path.dirname(args.output + '/' + path)),
                                        fileid=path).encode('utf-8'))


def render_error(err, total_errors):
    template = env.get_template('error.html')
    index = err[u'index']
    prev = index - 1
    if prev < 0:
        prev = total_errors - 1
    next_ = index + 1
    if next_ >= total_errors:
        next_ = 0
    with open('%s/error-%d.html' % (args.output, index), 'w') as target:
        target.write(template.render(err=err, output_dir=".", fileids=fileids, prev=prev, next=next_))


def render_template(filename):
    with open(args.output + '/' + filename, 'w') as target:
        template = env.get_template(filename)
        target.write(template.render(output_dir="."))

def json_stringify(d):
    d = d or []
    return urllib.quote(str(json.dumps(d)))

env = Environment(
    autoescape=True,
    loader=FileSystemLoader(dirname + '/templates/')
)
env.filters[u'highlight'] = highlight_c
env.filters[u'json_stringify'] = json_stringify

env.globals.update(global_data)
env.globals[u'files'] = sorted(files)
env.globals[u'errors'] = errors

fileids = {}

if os.path.exists(args.output + '/static/'):
    shutil.rmtree(args.output + '/static/')
shutil.copytree(dirname + '/static/', args.output + '/static/')
for template in ['index.html', 'error-descriptions.html']:
    render_template(template)
for abs,rel in files.iteritems():
    fileids[abs] = str(uuid.uuid4())
    render_code(rel, abs, abs, True, False)
    render_code(rel, abs, fileids[abs], False, True)
for err in errors:
    render_error(err, len(errors))
with open(args.output + "/errors.json.js", "w") as file:
    file.write("var json_data='" + json.dumps(errors).replace('\\"',"'").replace("'", "\\'") + "';\n");
