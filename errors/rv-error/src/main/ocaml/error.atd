type error_category = [
  Undefined of language
| Unspecified of language
| ImplementationDefined of language
| ImplementationUndefined of language
| ConditionallySupported
| IllFormed
| Underspecified of language
| ConstraintViolation
| SyntaxError of language
| LintError
| Unknown
]

type citation = {
  document: string;
  section: string;
  ?paragraph: string option;
}

type language = [
  C
| CPP
]

type location = {
  rel_file: string;
  abs_file: string;
  line: int;
  ?column: int option;
  system_header: bool;
}

type frame = {
  symbol: string;
  ?loc: location option;
  locks: lock list;
  local_vars: local_var list;
  elided: bool;
}

type raw_frame = {
  address: string;
  locks: raw_lock list;
}

type local_var_value_bitfield = {
  value: sized_byte_value list;
  padding: sized_byte_value list;
}

type storage_duration = [
| Allocated
| Static
| Thread
| Auto
| Unknown of string
]

type pointer_value = {
  base: base_id;
  ?duration: storage_duration option;
  ?offset: int option;
}

type base_id = [
| Reference of string
| Base of int
]

type local_var_value = [
| Bytes of sized_byte_value list
| Int of int
| Float of string
| Pointer of pointer_value
| NullPointer
| FileDescriptor of string
| Function
| Array of local_var_value list
| Struct of fields_info
| Union of fields_info
| EnumConstant of string
| Bitfield of local_var_value_bitfield
]

type field_value = {
  offset: int;
  value: local_var;
}

type local_var = {
  id: string;
  vtype: value_type;
  vtype_str: string;
  size: int;
  value: local_var_value;
}

type byte_value = [
| Int of int
| Indeterminate
| Unspecified
| Bitfield of sized_byte_value list
| EncodedValue of encoded_value
]

type sized_byte_value = {
  length: int;
  value: byte_value;
}

type encoded_value = {
  value: local_var_value;
  bstart: int;
  bend: int;
}

type sized_type = {
  vtype: value_type;
  size : int;
}

type array_type = {
  vtype: value_type;
  element_bitsize: int;
  ?length : int option;
}

type tag_info = {
  tag_name: string;
  ?active_variant: string option;
  ?field_info: fields_info option;
}

type enum_info = {
  enum_name: string;
  type_alias: value_type;
  ?enum_id: string option;
}

type padding = {
  offset: int;
  value: sized_byte_value;
}

type fields_info = {
  fields: field_value list;
  paddings: padding list;
}

type value_type = [
| Bool
| Bitfield of sized_type
| Float
| Double
| LongDouble
| Void
| NoType
| ShortInt
| Int
| LongInt
| LongLongInt
| SignedChar
| UnsignedShortInt
| UnsignedInt
| UnsignedLongInt
| UnsignedLongLongInt
| UnsignedChar
| Char
| Pointer of value_type
| Enum of enum_info
| Union of tag_info
| Struct of tag_info
| Array of array_type
| IncompleteArray of array_type
| VariableArray of array_type
| Function
]

type lock = {
  id: string;
  locked_at: frame;
}

type raw_lock = {
  id: raw_field;
  locked_at: string;
}

type stack_trace_component = {
  ?description: string option;
  frames: frame list;
}

type raw_stack_trace_component = {
  description_format: string;
  description_fields: raw_component_field list;
  frames: raw_frame list;
}

type raw_component_field = [
  Signal of int
| Lock of raw_field
]

type stack_trace = {
  components: stack_trace_component list;
  ?thread_id: string option;
  ?thread_created_by: string option;
  ?thread_created_at: frame option;
}

type raw_stack_trace = {
  components: raw_stack_trace_component list;
  ?thread_id: string option;
  ?thread_created_by: string option;
  ?thread_created_at: raw_frame option;
}

type location_error = {
  description: string;
  loc: frame;
  category: error_category;
  error_id: string;
  citations: citation list;
  ?friendly_cat: string option;
  ?long_desc: string option;
}

type stack_error = {
  description: string;
  stack_traces: stack_trace list;
  category: error_category;
  error_id: string;
  citations: citation list;
  ?friendly_cat: string option;
  ?long_desc: string option;
}

type raw_field = {
  address: string;
  ?frame1: raw_field_frame option;
  ?frame2: raw_field_frame option;
}

type raw_field_frame = {
  pc: string;
  cfa: string;
}

type maybe_skipped_raw_stack_error = [
  Skipped of skipped_check
| StackError of raw_stack_error
]

type skipped_check = {
  description_format: string;
  description_fields: raw_field list;
  category: error_category;
  first_stack: raw_stack_trace_component;
  second_stack: raw_stack_trace_component;
  count: string
}

type raw_stack_error = {
  description_format: string;
  description_fields: raw_field list;
  stack_traces: raw_stack_trace list;
  category: error_category;
  error_id: string;
}

type metadata = {
  suppressions: suppression list;
  message_length: int;
  format: format;
  ?output: string option;
  previous_errors: string list;
  fatal_errors: bool;
  rv_error: string;
}

type format = [
  CSV
| Console
| HTML
| JSON
]

type suppression = {
  condition: condition;
  suppress: bool;
}

type line_spec = {
  start_line: int;
  end_line: int;
  ?file: string option;
}

type condition = [
  Category of error_category
| ErrorId of string
| SystemHeader of bool
| Line of line_spec
| File of string
| Symbol of string
| Ifdef of string
| Ifndef of string
| Duplicate of bool
]
