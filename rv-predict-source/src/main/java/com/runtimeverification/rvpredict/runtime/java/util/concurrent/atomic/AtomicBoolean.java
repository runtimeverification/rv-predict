/*
 * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 */

/*
 *
 *
 *
 *
 *
 * Written by Doug Lea with assistance from members of JCP JSR-166
 * Expert Group and released to the public domain, as explained at
 * http://creativecommons.org/publicdomain/zero/1.0/
 */

package com.runtimeverification.rvpredict.runtime.java.util.concurrent.atomic;
import sun.misc.Unsafe;

import com.runtimeverification.rvpredict.log.EventType;
import com.runtimeverification.rvpredict.runtime.RVPredictRuntime;

/**
 * A {@code boolean} value that may be updated atomically. See the
 * {@link java.util.concurrent.atomic} package specification for
 * description of the properties of atomic variables. An
 * {@code AtomicBoolean} is used in applications such as atomically
 * updated flags, and cannot be used as a replacement for a
 * {@link java.lang.Boolean}.
 *
 * @since 1.5
 * @author Doug Lea
 */
public class AtomicBoolean implements java.io.Serializable {
    private static final long serialVersionUID = 4654671469794556979L;

    private static final int RVPREDICT_ATOMIC_BOOL_LOC_ID = RVPredictRuntime.metadata
            .getLocationId("java.util.concurrent.atomic.AtomicBoolean(AtomicBoolean.java:n/a)");
    private static final int RVPREDICT_ATOMIC_BOOL_VALUE_ID = RVPredictRuntime.metadata
            .getVariableId("java.util.concurrent.atomic.AtomicBoolean", "value");

    // setup to use Unsafe.compareAndSwapInt for updates
    private static final Unsafe unsafe = Unsafe.getUnsafe();
    private static final long valueOffset;

    static {
        try {
            valueOffset = unsafe.objectFieldOffset
                (AtomicBoolean.class.getDeclaredField("value"));
        } catch (Exception ex) { throw new Error(ex); }
    }

    private volatile int value;

    // RV-Predict logging methods

    /**
     * Ensures that when a read event reads the value set by a CAS operation,
     * that read event is logged after the write event generated by the CAS
     * operation.
     */
    private final Object _rvpredict_sync = new Object();

    private void _rvpredict_atomic_read(int value) {
        RVPredictRuntime.saveAtomicEvent(EventType.ATOMIC_READ, RVPREDICT_ATOMIC_BOOL_LOC_ID,
                System.identityHashCode(this), -RVPREDICT_ATOMIC_BOOL_VALUE_ID, value, 0);
    }

    private void _rvpredict_atomic_write(int value) {
        RVPredictRuntime.saveAtomicEvent(EventType.ATOMIC_WRITE, RVPREDICT_ATOMIC_BOOL_LOC_ID,
                System.identityHashCode(this), -RVPREDICT_ATOMIC_BOOL_VALUE_ID, value, 0);
    }

    private void _rvpredict_atomic_read_then_write(int oldValue, int newValue) {
        RVPredictRuntime.saveAtomicEvent(EventType.ATOMIC_READ_THEN_WRITE, RVPREDICT_ATOMIC_BOOL_LOC_ID,
                System.identityHashCode(this), -RVPREDICT_ATOMIC_BOOL_VALUE_ID, oldValue, newValue);
    }

    private int _rvpredict_get_value() {
        synchronized (_rvpredict_sync) {
            int value = this.value;
            _rvpredict_atomic_read(value);
            return value;
        }
    }

    private void _rvpredict_set_value(int newValue) {
        _rvpredict_atomic_write(newValue);
        value = newValue;
    }

    private boolean _rvpredict_cas_value(int expect, int update) {
        synchronized (_rvpredict_sync) {
            if (unsafe.compareAndSwapInt(this, valueOffset, expect, update)) {
                _rvpredict_atomic_read_then_write(expect, update);
                return true;
            }
        }
        _rvpredict_atomic_read(expect == 0 ? 1 : 0);
        return false;
    }

    /**
     * Creates a new {@code AtomicBoolean} with the given initial value.
     *
     * @param initialValue the initial value
     */
    public AtomicBoolean(boolean initialValue) {
        _rvpredict_set_value(initialValue ? 1 : 0);
    }

    /**
     * Creates a new {@code AtomicBoolean} with initial value {@code false}.
     */
    public AtomicBoolean() {
    }

    /**
     * Returns the current value.
     *
     * @return the current value
     */
    public final boolean get() {
        return _rvpredict_get_value() != 0;
    }

    /**
     * Atomically sets the value to the given updated value
     * if the current value {@code ==} the expected value.
     *
     * @param expect the expected value
     * @param update the new value
     * @return {@code true} if successful. False return indicates that
     * the actual value was not equal to the expected value.
     */
    public final boolean compareAndSet(boolean expect, boolean update) {
        int e = expect ? 1 : 0;
        int u = update ? 1 : 0;
        return _rvpredict_cas_value(e, u);
    }

    /**
     * Atomically sets the value to the given updated value
     * if the current value {@code ==} the expected value.
     *
     * <p><a href="package-summary.html#weakCompareAndSet">May fail
     * spuriously and does not provide ordering guarantees</a>, so is
     * only rarely an appropriate alternative to {@code compareAndSet}.
     *
     * @param expect the expected value
     * @param update the new value
     * @return {@code true} if successful
     */
    public boolean weakCompareAndSet(boolean expect, boolean update) {
        int e = expect ? 1 : 0;
        int u = update ? 1 : 0;
        return _rvpredict_cas_value(e, u);
    }

    /**
     * Unconditionally sets to the given value.
     *
     * @param newValue the new value
     */
    public final void set(boolean newValue) {
        _rvpredict_set_value(newValue ? 1 : 0);
    }

    /**
     * Eventually sets to the given value.
     *
     * @param newValue the new value
     * @since 1.6
     */
    public final void lazySet(boolean newValue) {
        // RVPredict: it's OK to treat it the same way as set();
        // http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6275329
        _rvpredict_set_value(newValue ? 1 : 0);
    }

    /**
     * Atomically sets to the given value and returns the previous value.
     *
     * @param newValue the new value
     * @return the previous value
     */
    public final boolean getAndSet(boolean newValue) {
        boolean prev;
        do {
            prev = get();
        } while (!compareAndSet(prev, newValue));
        return prev;
    }

    /**
     * Returns the String representation of the current value.
     * @return the String representation of the current value
     */
    public String toString() {
        return Boolean.toString(get());
    }

}
