#!/bin/sh
#
# Note: this is a more-or-less "portable" Bourne shell script.
# That is, it is not reliant on any bash-isms.
#

set -e
set -u

# Filter out arguments that should not be passed to the compiler.
# Quote args to make them safe in the shell.
# Usage: quotedlist="$(shell_quote args...)"
#
# Use the returned string by evaling it inside
# double quotes, like this:
#    eval "set -- $quotedlist"
# or like this:
#    eval "\$command $quotedlist \$filename"
#
filter_noncc_arguments()
{(
	local result=''
	local arg qarg
	LC_COLLATE=C ; export LC_COLLATE # so [a-zA-Z0-9] works in ASCII
	for arg in "$@" ; do
		case "${arg}" in
		--just-print)
			continue
			;;
		--intr-personality=*)
			continue
			;;
		--sigsim=*)
			continue
			;;
		'')
			qarg="''"
			;;
		*[!-./a-zA-Z0-9]*)
			# Convert each embedded ' to '\'',
			# then insert ' at the beginning of the first line,
			# and append ' at the end of the last line.
			# Finally, elide unnecessary '' pairs at the
			# beginning and end of the result and as part of
			# '\'''\'' sequences that result from multiple
			# adjacent quotes in he input.
			qarg="$(printf "%s\n" "$arg" | \
			    ${SED:-sed} -e "s/'/'\\\\''/g" \
				-e "1s/^/'/" -e "\$s/\$/'/" \
				-e "1s/^''//" -e "\$s/''\$//" \
				-e "s/'''/'/g"
				)"
			;;
		*)
			# Arg is not the empty string, and does not contain
			# any unsafe characters.  Leave it unchanged for
			# readability.
			qarg="${arg}"
			;;
		esac
		result="${result}${result:+ }${qarg}"
	done
	printf "%s\n" "$result"
)}

ldscript_dir=$(dirname $0)/../share/rv-predict-c
pass_dir=$(dirname $0)/../--LIBEXECDIR--
runtime_dir=$(dirname $0)/../lib

cplusplus=no
sources=no
link=yes
compile=yes
intr_personality=none
sigsim=none
just_print=no

prog=$(basename $0)

if [ ${prog%%++} != ${prog} ]; then
	cplusplus=yes
fi

for arg in "$@"; do
	case "$arg" in
	--)	break
		;;
	-help)	help=yes
		break
		;;
        --version)
		version="unknown"
		if [ -f /usr/share/doc/rv-predict-c/version ]; then
			version=$(cat /usr/share/doc/rv-predict-c/version)
		fi
		printf "RV-Predict/C version %s\n\n" $version 
		break;;
	--just-print)
		just_print=yes
		continue
		;;
	--intr-personality=*)
		intr_personality=${arg##--intr-personality=}
		continue
		;;
	--sigsim=*)
		sigsim=${arg##--sigsim=}
		continue
		;;
	-M|-E)	# -M implies -E, and -E skips normal compilation
		compile=no
		link=no
		continue
		;;
	-m32)	bits=32
		echo "${prog}: $arg is not supported." 1>&2
		echo "${prog}: this version of RV-Predict/C provides only a" \
		    "64-bit runtime." 1>&2
		exit 1
		continue
		;;
	-m64)	bits=64
		continue
		;;
	-[cS]|-shared)	link=no
		continue
		;;
	*.cc|*.cp|*.cxx|*.cpp|*.CPP|*.c++|*.C)
		cplusplus=yes
		sources=yes
		;;
	*.c)
		sources=yes
		;;
	esac
done

quoted_list=$(filter_noncc_arguments "$@")
eval "set -- ${quoted_list}"

if [ ${cplusplus:-no} = yes ]; then
	compiler="clang++-4.0 -std=c++11"
else
	compiler=clang-4.0
fi

if [ ${sources:-yes} = yes -a ${compile:-yes} = yes ] || [ ${help:-no} = yes ]
then
	pass="-Xclang -load -Xclang $pass_dir/rvpinstrument.so -g"
	if [ ${intr_personality:-none} != none ]; then
		pass="-include rvpredict_intr_${intr_personality}${bits:-}.h ${pass}"
	fi
fi

# -ldl for dlsym()
# -lrt for timer_create() et cetera, in hacks.c
# -latomic for atomic_is_lock_free()
# -pthread for POSIX threads
if [ ${link:-yes} = yes ]; then
	runtime="-Wl,-rpath=${runtime_dir} -Wl,-T${ldscript_dir}/ldscript -L${runtime_dir} -lrvprt${bits:-} -lrvpi_${intr_personality}${bits:-} -lrvpi_default${bits:-} -lrvpsigsim_${sigsim}${bits:-} -lrvpsigsim_default${bits:-} -ldl -lrt -latomic -pthread -g"
fi

if [ ${just_print} = yes ]; then
	pfx=echo
else
	pfx=
fi

$pfx $compiler ${pass:-} "$@" ${runtime:-}
